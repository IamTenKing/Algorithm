package QuickSort;import QuickSort.Sort.Sort;/** * @author: jt * @date: 2018-10-10 */public class QuickSelect<T extends  Comparable<T>> extends Sort<T> {    @Override    public void sort(T[] nums) {    }    public T select(T[] nums, int k){        int l=0,h=nums.length-1;        while (h>l){            int j=partition(nums,l,h);            if(j==k){                return nums[j];            }else if(k<j){                h=j-1;            }else{                l=j+1;            }        }        return nums[k];    }    private int partition(T[] nums, int l, int h) {      int i=l,j=h+1;      T v = nums[l];      while(true){          while(less(nums[++i],v) && i!=h);          while(less(v,nums[--j]) && j!=l);          if(i>=j){              break;          }          swap(nums,i,j);      }      swap(nums,l,j);      return j;    }}class  SelectTest{    public static void main(String[] args) {        QuickSelect<Integer> integerQuickSelect = new QuickSelect<Integer>();        Integer[] arr={4,3,2,1};        Integer select = integerQuickSelect.select(arr, 3);        System.out.println(select);    }}
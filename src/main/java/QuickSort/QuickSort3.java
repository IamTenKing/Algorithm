package QuickSort;import QuickSort.Sort.Sort;import static java.util.Collections.shuffle;/** * @author: jt * @date: 2018-10-10 */public class QuickSort3<T extends Comparable<T>> extends Sort<T> {    @Override    public void sort(T[] nums) {        sort(nums, 0, nums.length - 1);    }    private void sort(T[] nums, int l, int h) {        if (h <= l) {            return;        }        int j = partition(nums, l, h);        //递归        sort(nums, l, j - 1);        sort(nums, j + 1, h);    }    /**     * 获取切分元素     * @param nums     * @param l     * @param h     * @return     */    private int partition(T[] nums, int l, int h) {        int i = l, j = h + 1;        T x = nums[l];        while(true){            while(less(x,nums[--j]) && j!=l);            while(less(nums[++i],x) && i!=h);            if(i>=j){                break;            }            swap(nums,i,j);        }        swap(nums,l,j);        return j;    }}